<?php

namespace PhpAiSdk\Laravel;

use Illuminate\Support\Manager;
use Illuminate\Support\Str;
use PhpAiSdk\Laravel\Contracts\Provider;
use Illuminate\Support\Facades\Config;

class AiManager extends Manager
{
    public function getDefaultDriver()
    {
        throw new \LogicException(
            'Default AI provider is not supported. Specify a provider and model, e.g., Ai::openai("model-name").'
        );
    }

    /**
     * Override the base Manager::createDriver so that any
     * configured provider key will be built via buildProvider().
     *
     * @param  string  $driverKey
     * @return Provider
     */
    protected function createDriver($driverKey): Provider
    {
        return $this->buildProvider($driverKey);
    }

    protected function buildProvider(string $driverKey): Provider
    {
        $providerConfigKey = "ai.providers.{$driverKey}";
        $config = $this->config->get($providerConfigKey);

        if (is_null($config)) {
            throw new \InvalidArgumentException(
                "Configuration for AI provider '{$driverKey}' not found at '{$providerConfigKey}'."
            );
        }

        $driverClass = $config['driver_class'] ?? null;
        if (empty($driverClass)) {
            throw new \InvalidArgumentException(
                "Provider class ('driver_class') is not configured for AI provider '{$driverKey}'."
            );
        }
        if (!class_exists($driverClass)) {
            throw new \InvalidArgumentException(
                "Provider class '{$driverClass}' for AI provider '{$driverKey}' not found."
            );
        }
        if (!is_subclass_of($driverClass, Provider::class)) {
            throw new \InvalidArgumentException(
                "Provider class '{$driverClass}' for '{$driverKey}' must implement PhpAiSdk\\Laravel\\Contracts\\Provider."
            );
        }
        return new $driverClass($config);
    }

    /**
     * Generate text using the specified provider and model.
     *
     * @param  string  $prompt
     * @param  array  $options  Must include 'model' as a specifier array,
     *                          e.g., ['provider' => 'openai', 'name' => 'gpt-4o-mini'].
     *                          Use Ai::openai('gpt-4o-mini') to generate this.
     * @return string
     * @throws \InvalidArgumentException
     */
    public function generateText(string $prompt, array $options = []): string
    {
        if (empty($options['model'])) {
            throw new \InvalidArgumentException(
                "The 'model' option is required. Use Ai::providerName('model-identifier') to specify it."
            );
        }

        $modelSpec = $options['model'];

        if (
            !is_array($modelSpec) ||
            !isset($modelSpec['provider']) ||
            !isset($modelSpec['name'])
        ) {
            throw new \InvalidArgumentException(
                "Invalid 'model' option format. It should be an array with 'provider' and 'name' keys, generated by Ai::providerName('model-identifier')."
            );
        }

        $providerKey = $modelSpec['provider']; // e.g., 'openai'
        $providerModelName = $modelSpec['name']; // e.g., 'gpt-4o-mini'

        // Ensure the provider is configured
        if (!$this->config->has("ai.providers.{$providerKey}")) {
            throw new \InvalidArgumentException(
                "AI provider '{$providerKey}' is not configured in config/ai.php."
            );
        }

        /** @var \PhpAiSdk\Laravel\Contracts\Provider $provider */
        $provider = $this->driver($providerKey); // Resolves via non-static __call -> buildProvider

        // Prepare options for the provider, ensuring 'model' is the provider-specific name
        $providerOptions = $options;
        $providerOptions['model'] = $providerModelName;

        return $provider->generateText($prompt, $providerOptions);
    }

    /**
     * Dynamically handle calls to create driver instances (e.g., createOpenaiDriver).
     * This is for the underlying Manager functionality.
     */
    public function __call($method, $parameters)
    {
        if (
            strpos($method, 'create') === 0 &&
            Str::endsWith($method, 'Driver')
        ) {
            $studlyDriverName = substr(
                $method,
                strlen('create'),
                -strlen('Driver')
            );
            if (!empty($studlyDriverName)) {
                $driverKey = Str::snake($studlyDriverName);
                return $this->buildProvider($driverKey);
            }
        }
        return parent::__call($method, $parameters);
    }

    /**
     * Dynamically handle static calls to specify a provider and model (e.g., Ai::openai('gpt-4o-mini')).
     *
     * @param  string  $methodName  The provider key (e.g., 'openai', 'googleAi').
     * @param  array  $arguments   The first argument is the model name.
     * @return array               A model specifier array: ['provider' => 'provider_key', 'name' => 'model_name'].
     * @throws \BadMethodCallException|\InvalidArgumentException
     */
    public static function __callStatic($methodName, $arguments)
    {
        $providerKey = Str::snake($methodName); // e.g., 'googleAi' -> 'google_ai'

        // Check if this provider key exists in the configuration
        // Note: Config facade is used here as $this->app is not available in static context.
        $configuredProviders = Config::get('ai.providers', []);

        if (!array_key_exists($providerKey, $configuredProviders)) {
            throw new \BadMethodCallException(
                "AI provider '{$providerKey}' (called as {$methodName}) is not configured in config/ai.php."
            );
        }

        if (empty($arguments[0])) {
            throw new \InvalidArgumentException(
                "Model name must be provided when calling Ai::{$methodName}('model-name')."
            );
        }
        $modelName = $arguments[0];

        return ['provider' => $providerKey, 'name' => $modelName];
    }
}
